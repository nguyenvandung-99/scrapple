{"version":3,"sources":["server/Catalog.js","server/Score.js","components/ScoreBoard.js","components/Square.js","components/Tray.js","components/Instruction.js","screens/Game.js","App.js","index.js"],"names":["catalog","letter","score","count","map","tile","Array","fill","flat","ScoreRound","board","level","bonus","grant","Math","floor","random","calculateBonus","i","reduce","a","b","length","ScoreBoard","props","id","className","Square","class","onClick","Tray","tray_out","push","string","Instruction","show","copyUnique","array","JSON","parse","stringify","data","Game","state","new_tray","current_new_tray","previous_tray","current_previous_tray","current_score","strike","endgame","showinst","noti","handleChange","bind","event","this","setState","target","value","newRound","clearNoti","word","word_string","j","k","blank_pos","pow","blank_com","blank_let","String","fromCharCode","reverse","join","toLowerCase","includes","setTimeout","square","splice","checkstrike","current_tray","slice","eraseAll","concat","board_color","bottombutton","begin","type","data-toggle","onChange","assess","role","shuffle","clickPrevious","clickNew","toggleInst","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00a0dcce.chunk.js","sourcesContent":["let tileBag = [\r\n  { letter: \"E\", score: 1, count: 12 },\r\n  { letter: \"A\", score: 1, count: 9 },\r\n  { letter: \"I\", score: 1, count: 9 },\r\n  { letter: \"O\", score: 1, count: 8 },\r\n  { letter: \"N\", score: 1, count: 6 },\r\n  { letter: \"R\", score: 1, count: 6 },\r\n  { letter: \"T\", score: 1, count: 6 },\r\n  { letter: \"L\", score: 1, count: 4 },\r\n  { letter: \"S\", score: 1, count: 4 },\r\n  { letter: \"U\", score: 1, count: 4 },\r\n  { letter: \"D\", score: 2, count: 4 },\r\n  { letter: \"G\", score: 2, count: 3 },\r\n  { letter: \"B\", score: 3, count: 2 },\r\n  { letter: \"C\", score: 3, count: 2 },\r\n  { letter: \"M\", score: 3, count: 2 },\r\n  { letter: \"P\", score: 3, count: 2 },\r\n  { letter: \"F\", score: 4, count: 2 },\r\n  { letter: \"H\", score: 4, count: 2 },\r\n  { letter: \"V\", score: 4, count: 2 },\r\n  { letter: \"W\", score: 4, count: 2 },\r\n  { letter: \"Y\", score: 4, count: 2 },\r\n  { letter: \"K\", score: 5, count: 1 },\r\n  { letter: \"J\", score: 8, count: 1 },\r\n  { letter: \"X\", score: 8, count: 1 },\r\n  { letter: \"Q\", score: 10, count: 1 },\r\n  { letter: \"Z\", score: 10, count: 1 },\r\n  { letter: \"_ \", score: 0, count: 2 },\r\n];\r\n\r\n\r\nexport let catalog = tileBag\r\n  .map((tile) => Array(tile.count).fill(null).map(() => ({letter: tile.letter, score: tile.score})))\r\n  .flat(); // unique objects","function calculateBonus(level) { // per letter\r\n  // checked\r\n  let grant;\r\n  switch (level) {\r\n    case \"easy\":\r\n      grant = 5;\r\n      break;\r\n    case \"medium\":\r\n      grant = 7;\r\n      break;\r\n    case \"hard\":\r\n      grant = 9;\r\n      break;\r\n    default:\r\n      grant = 7;\r\n  }\r\n  const bonus = 100 - Math.floor(Math.random() * grant) * 10;\r\n  return bonus;\r\n}\r\n\r\nexport default function ScoreRound(board,level) { // return score for each round. pass Board for now, maybe level for later\r\n  let bonus = calculateBonus(level);\r\n  let current_score = board.map((i) => i.score*10).reduce((a,b) => (a+b),0) + board.length*bonus;\r\n  return [bonus, current_score];\r\n}","export default function ScoreBoard(props) {\r\n  return (\r\n    <div id=\"score\" className=\"panel panel-default panel-heading\">\r\n      <div className=\"score-text\">Score</div>\r\n      <div className=\"score-value\">{props.score}</div> \r\n    </div>\r\n  );\r\n}","export default function Square(props) { // pass tile, class and onClick. Checked\r\n  return (\r\n    <>\r\n      {props.tile.letter &&\r\n        <button className={\"square \" + props.class} onClick={props.onClick}>\r\n          {props.tile.letter}<sub className=\"square-sub\">{props.tile.score}</sub>\r\n        </button>\r\n      }\r\n    </>\r\n  );\r\n}","import Square from './Square'\r\n\r\nexport default function Tray(props) { // pass: string with tiles, onClick, class. Checked\r\n  let tray_out = [];\r\n  for (let i = 0; i < (props.string.length); i++) {\r\n    tray_out.push(\r\n      <span key={i}>\r\n        {\r\n          <Square \r\n            tile={props.string[i]}\r\n            class={props.class} // square-previous, square-new or square-board\r\n            onClick={() => props.onClick(i)}\r\n          />\r\n        }\r\n      </span>\r\n    )\r\n  };\r\n  return (\r\n    <>\r\n      {tray_out}\r\n    </>\r\n  );\r\n}","export default function Instruction(props) { // pass show and onClick\r\n  // if (props.show) {\r\n    return (\r\n      props.show ? \r\n      <>\r\n        <button className=\"btn btn-success\" onClick={props.onClick}>Hide instructions</button>\r\n        <h2>\r\n          Instructions\r\n        </h2>\r\n        <ul>\r\n          <li>You begin with 7 letters taken from the tile bag, each with different score value.</li>\r\n          <li>The goal is to make an English word as long as possible with the letters given.</li>\r\n          <li>The score will be the sum of letter values and a magical bonus based on the word length.</li>\r\n          <li>The word submitted from the previous round will be used again for this round.</li>\r\n          <li>You can use up to half the letters of the previous round.</li>\r\n          <li>The letter from the previous round will only grant bonus point and not the letter value.</li>\r\n          <li>You will lose if you score below 300 points for 3 consecutive rounds.</li>\r\n          <li>You will win if you use up the tile bag.</li>\r\n          <li>Each shuffle counts as one round with no score gained. Have fun!</li>\r\n        </ul>\r\n      </>\r\n    \r\n  // } else {\r\n    // return (\r\n      : <button className=\"btn btn-success\" onClick={props.onClick}>Show instructions</button>\r\n    )\r\n  \r\n}","import React from 'react';\r\nimport { catalog } from '../server/Catalog';\r\nimport Dictionary from '../server/Dictionary.json';\r\nimport ScoreRound from '../server/Score';\r\nimport ScoreBoard from '../components/ScoreBoard';\r\nimport Tray from '../components/Tray';\r\nimport Instruction from '../components/Instruction';\r\n\r\nfunction copyUnique(array) {\r\n  return JSON.parse(JSON.stringify(array));\r\n}\r\n\r\nlet data = Dictionary.data;\r\n\r\nexport default class Game extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      new_tray: Array(7).fill({ letter: null, score: 0,}), // beginning state of new_tray\r\n      current_new_tray: Array(7).fill({ letter: null, score: 0,}),\r\n      board: [],\r\n      previous_tray: [],\r\n      current_previous_tray: [],\r\n      score: 0,\r\n      current_score: 0,\r\n      bonus: 0,\r\n      catalog,\r\n      strike: 0,\r\n      endgame: true,\r\n      showinst: true,\r\n      level: \"easy\",\r\n      noti: \"Welcome to Scrapple!\",\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({level: event.target.value});\r\n  }\r\n\r\n  toggleInst() {\r\n    this.setState({\r\n      showinst: !this.state.showinst,\r\n    });\r\n  }\r\n\r\n  begin() { \r\n    this.setState({\r\n      new_tray: Array(7).fill({ letter: null, score: 0,}), // beginning state of new_tray\r\n      current_new_tray: Array(7).fill({ letter: null, score: 0,}),\r\n      board: [],\r\n      score: 0,\r\n      current_score: 0,\r\n      catalog,\r\n      strike: 0,\r\n      endgame: false,\r\n    });\r\n    this.newRound()\r\n    this.clearNoti()\r\n    this.setState({\r\n      score: 0,\r\n    })\r\n  }\r\n\r\n  assess() {\r\n    let board = this.state.board;\r\n    let word; let word_string; // word is array, word_string is string\r\n    if (board.length === 0) {\r\n      this.setState({\r\n        noti: \"The board is empty\",\r\n      });\r\n      return;\r\n    } \r\n    //else {\r\n      //word = board.map(i => i.letter).join(\"\").toLowerCase();\r\n    //}\r\n    else {\r\n      word = board.map(i => i.letter);\r\n    }\r\n    let blank_pos = []; let i; let j; let k;\r\n    for (i = 0; i < (word.length); i++) {\r\n      if (word[i] === \"_ \") {\r\n        blank_pos.push(i);\r\n      }\r\n    }\r\n    for (i = 0; i < Math.pow(26,(blank_pos.length)); i++) { // i is the combination in 26-th\r\n      let blank_com = i; // pass it to blank_combination\r\n      let blank_let = [];\r\n      for (j = 0; j < blank_pos.length; j++) { // get the letter based on blank_com\r\n        k = blank_com % 26; // j is the remainder\r\n        blank_let.push(String.fromCharCode(65+k)) // 65 to 90 is A to Z\r\n        blank_com = (blank_com - k) / 26;\r\n      }\r\n      blank_let.reverse()\r\n      for (j = 0; j < blank_pos.length; j++) {\r\n        word[blank_pos[j]] = blank_let[j];\r\n      }\r\n      word_string = word.join(\"\").toLowerCase();\r\n      if (data.includes(word_string)) {\r\n        for (j = 0; j < blank_pos.length; j++) {\r\n          board[blank_pos[j]].letter = blank_let[j];\r\n        }\r\n        this.setState({\r\n          board: board,\r\n        })\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (data.includes(word_string)) { \r\n      this.newRound(); // how to print this to the screen tho\r\n    } else {\r\n      this.setState({\r\n        noti: \"The word does not exist\",\r\n      });\r\n    }\r\n    setTimeout(() => this.clearNoti(), 2000);\r\n  }\r\n\r\n  clearNoti() {\r\n    this.setState({\r\n      noti: null,\r\n    });\r\n  }\r\n\r\n  newRound() {\r\n    let bonus; let current_score; \r\n    [bonus, current_score] = ScoreRound(this.state.board,this.state.level);\r\n    let score = this.state.score + current_score;\r\n    let strike = this.state.strike;\r\n    strike = current_score < 300 ? strike + 1 : 1;\r\n    let catalog = this.state.catalog; // I can just leave catalog outside class but for management purpose let's not\r\n    let previous_tray = this.state.board.map((square) => {\r\n      if (square) {\r\n        square.score = 0;\r\n        return square;\r\n      }\r\n      return null;\r\n    }); \r\n    let new_tray = this.state.current_new_tray.map((square) => { // fill in current_new_tray the letters from catalog and put it under new_tray\r\n      if (square.letter == null && catalog.length > 0) {\r\n        let random = Math.floor(Math.random() * catalog.length);\r\n        square = catalog[random];\r\n        catalog.splice(random, 1);\r\n      }\r\n      return square;\r\n    });\r\n    let noti = (\r\n      <>\r\n        <div>\r\n          Bonus for each letter: {bonus}\r\n        </div>\r\n        <div>\r\n          Score for this round: {current_score}\r\n        </div>\r\n      </>\r\n    );\r\n    this.setState ({\r\n      new_tray: new_tray,\r\n      current_new_tray: copyUnique(new_tray),\r\n      previous_tray: previous_tray,\r\n      current_previous_tray: copyUnique(previous_tray),\r\n      board: [],\r\n      catalog: catalog,\r\n      bonus: bonus,\r\n      current_score: current_score,\r\n      score: score,\r\n      strike: strike,\r\n      noti: noti,\r\n    });\r\n    this.checkstrike(strike);\r\n  }\r\n\r\n  // need to look for a way to shorten these two functions into one mutual LATER\r\n  clickPrevious(i) { // pass the data to Board first, then make the square disappear in Previous\r\n    const board = this.state.board;\r\n    const current_tray = this.state.current_previous_tray.slice();\r\n    if (current_tray.length > Math.floor(this.state.previous_tray.length / 2)) { // maximum half letters from previous used\r\n      board.push(copyUnique(current_tray)[i]);  \r\n      current_tray.splice(i,1); \r\n      this.setState({\r\n        current_previous_tray: current_tray,\r\n        board: board,\r\n    });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  clickNew(i) { // pass the data to Board first, then make the square disappear in New\r\n    const board = this.state.board;\r\n    const current_tray = this.state.current_new_tray;\r\n    board.push(copyUnique(current_tray)[i]);\r\n    current_tray[i].letter = null; // \r\n    this.setState({\r\n      current_new_tray: current_tray,\r\n      board: board,\r\n    })\r\n  }\r\n\r\n  eraseAll() {\r\n    this.setState({\r\n      current_previous_tray: copyUnique(this.state.previous_tray),\r\n      current_new_tray: copyUnique(this.state.new_tray),\r\n      board: [],\r\n    })\r\n  }\r\n\r\n  shuffle() {\r\n    let strike;\r\n    if (this.state.catalog.length > 0) {\r\n      this.eraseAll();\r\n      let new_tray = this.state.new_tray;\r\n      let catalog = this.state.catalog.concat(copyUnique(new_tray));\r\n      new_tray = new_tray.map((i) => {\r\n        let random = Math.floor(Math.random() * catalog.length);\r\n        let square = catalog[random];\r\n        catalog.splice(random, 1);\r\n        return square;\r\n      });\r\n      strike = this.state.strike + 1;\r\n      this.setState({\r\n        new_tray: new_tray,\r\n        current_new_tray: copyUnique(new_tray),\r\n        catalog: catalog,\r\n        strike: strike,\r\n      });\r\n    }\r\n    this.checkstrike(strike);\r\n  }\r\n\r\n  checkstrike(strike) {\r\n    if (strike > 3) {\r\n      this.setState({\r\n        new_tray: Array(7).fill({ letter: null, score: 0,}), // beginning state of new_tray\r\n        current_new_tray: Array(7).fill({ letter: null, score: 0,}),\r\n        board: [],\r\n        previous_tray: [],\r\n        current_previous_tray: [],\r\n        bonus: 0,\r\n        catalog: catalog,\r\n        strike: 0,\r\n        endgame: true,\r\n        showinst: true,\r\n        noti: \"Game over!\"\r\n      });\r\n      setTimeout(() => this.clearNoti(), 2000);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let board_color;\r\n    switch (this.state.strike) {\r\n      case 1:\r\n        board_color = \"panel-success\";\r\n        break;\r\n      case 2:\r\n        board_color = \"panel-warning\";\r\n        break;\r\n      case 3:\r\n        board_color = \"panel-danger\";\r\n        break;\r\n      default:\r\n        board_color = \"panel-default\";\r\n    }\r\n\r\n    let bottombutton = this.state.endgame ? (\r\n      <>\r\n        <div id=\"bottombutton\" onClick={() => this.begin()} className=\"btn btn-primary\">\r\n          Begin          \r\n        </div>\r\n        <br/>\r\n        <div className=\"dropdown\">Choose level:&nbsp;&nbsp;\r\n          <select className=\"btn btn-danger dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" value={this.state.level} onChange={this.handleChange}>\r\n            <option value=\"easy\">Easy</option>\r\n            <option value=\"medium\">Medium</option>\r\n            <option value=\"hard\">Hard</option>\r\n          </select>\r\n        </div>\r\n      </>) : (\r\n      <div id=\"bottombutton\" onClick={() => this.assess()} className=\"btn btn-primary\">\r\n        Submit\r\n      </div>)\r\n    \r\n    return (\r\n      <div id=\"game\">\r\n        <ScoreBoard\r\n          score={this.state.score}\r\n        />\r\n        <div id=\"noti\">\r\n          {this.state.noti}\r\n        </div>\r\n        <div className = {\"panel \" + board_color}>\r\n          <div id=\"game-board\" className=\"panel-heading\">\r\n            <Tray\r\n              class=\"square-board\"\r\n              string={this.state.board}\r\n              onClick={i => null}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div id=\"option\" className=\"btn-group\" role=\"group\">\r\n          <button id=\"eraseAll\" className=\"btn btn-secondary option-left\" onClick={() => this.eraseAll()}>\r\n            Erase All\r\n          </button>\r\n          <button id=\"shuffle\" className=\"btn btn-secondary option-right\" onClick={() => this.shuffle()}>\r\n            Shuffle\r\n          </button>\r\n        </div>\r\n        <div id=\"previous-tray\">\r\n          Previous word\r\n          <Tray\r\n            class=\"square-previous\"\r\n            string={this.state.current_previous_tray}\r\n            onClick={i => this.clickPrevious(i)}\r\n          />\r\n        </div>\r\n        <div id=\"new-tray\">\r\n          New tiles\r\n            <Tray\r\n              class=\"square-new\"\r\n              string={this.state.current_new_tray}\r\n              onClick={i => this.clickNew(i)}\r\n            />\r\n        </div>\r\n        <div>\r\n          {bottombutton} \r\n        </div>\r\n        <div id=\"inst\">\r\n          <Instruction\r\n            show={this.state.showinst}\r\n            onClick={() => this.toggleInst()}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import Game from './screens/Game'\nimport React from 'react';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}